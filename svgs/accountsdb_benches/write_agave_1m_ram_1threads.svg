<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Agave Write, 1M Accounts, RAM Index</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="222"><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.90%)</title><rect x="0.0000%" y="357" width="0.9009%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h54869074615e5fbbE.llvm.11818118077158964558 (13 samples, 5.86%)</title><rect x="0.9009%" y="341" width="5.8559%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="13"/><text x="1.1509%" y="351.50">_ZN71_$..</text></g><g><title>__rcu_read_unlock (1 samples, 0.45%)</title><rect x="17.5676%" y="293" width="0.4505%" height="15" fill="rgb(221,193,54)" fg:x="39" fg:w="1"/><text x="17.8176%" y="303.50"></text></g><g><title>access_error (1 samples, 0.45%)</title><rect x="18.0180%" y="293" width="0.4505%" height="15" fill="rgb(248,212,6)" fg:x="40" fg:w="1"/><text x="18.2680%" y="303.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.45%)</title><rect x="19.8198%" y="229" width="0.4505%" height="15" fill="rgb(208,68,35)" fg:x="44" fg:w="1"/><text x="20.0698%" y="239.50"></text></g><g><title>alloc_anon_folio (1 samples, 0.45%)</title><rect x="20.2703%" y="229" width="0.4505%" height="15" fill="rgb(232,128,0)" fg:x="45" fg:w="1"/><text x="20.5203%" y="239.50"></text></g><g><title>__folio_throttle_swaprate (2 samples, 0.90%)</title><rect x="22.0721%" y="213" width="0.9009%" height="15" fill="rgb(207,160,47)" fg:x="49" fg:w="2"/><text x="22.3221%" y="223.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.45%)</title><rect x="22.9730%" y="197" width="0.4505%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="1"/><text x="23.2230%" y="207.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.90%)</title><rect x="23.4234%" y="197" width="0.9009%" height="15" fill="rgb(218,30,26)" fg:x="52" fg:w="2"/><text x="23.6734%" y="207.50"></text></g><g><title>__mem_cgroup_charge (4 samples, 1.80%)</title><rect x="22.9730%" y="213" width="1.8018%" height="15" fill="rgb(220,122,19)" fg:x="51" fg:w="4"/><text x="23.2230%" y="223.50">_..</text></g><g><title>mem_cgroup_commit_charge (1 samples, 0.45%)</title><rect x="24.3243%" y="197" width="0.4505%" height="15" fill="rgb(250,228,42)" fg:x="54" fg:w="1"/><text x="24.5743%" y="207.50"></text></g><g><title>__pte_offset_map_lock (2 samples, 0.90%)</title><rect x="24.7748%" y="213" width="0.9009%" height="15" fill="rgb(240,193,28)" fg:x="55" fg:w="2"/><text x="25.0248%" y="223.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.45%)</title><rect x="25.2252%" y="197" width="0.4505%" height="15" fill="rgb(216,20,37)" fg:x="56" fg:w="1"/><text x="25.4752%" y="207.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.45%)</title><rect x="25.6757%" y="213" width="0.4505%" height="15" fill="rgb(206,188,39)" fg:x="57" fg:w="1"/><text x="25.9257%" y="223.50"></text></g><g><title>clear_page_rep (9 samples, 4.05%)</title><rect x="27.0270%" y="133" width="4.0541%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="9"/><text x="27.2770%" y="143.50">clea..</text></g><g><title>get_page_from_freelist (12 samples, 5.41%)</title><rect x="26.5766%" y="149" width="5.4054%" height="15" fill="rgb(231,73,38)" fg:x="59" fg:w="12"/><text x="26.8266%" y="159.50">get_pag..</text></g><g><title>rmqueue (2 samples, 0.90%)</title><rect x="31.0811%" y="133" width="0.9009%" height="15" fill="rgb(225,20,46)" fg:x="69" fg:w="2"/><text x="31.3311%" y="143.50"></text></g><g><title>__rmqueue_pcplist (2 samples, 0.90%)</title><rect x="31.0811%" y="117" width="0.9009%" height="15" fill="rgb(210,31,41)" fg:x="69" fg:w="2"/><text x="31.3311%" y="127.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.90%)</title><rect x="31.0811%" y="101" width="0.9009%" height="15" fill="rgb(221,200,47)" fg:x="69" fg:w="2"/><text x="31.3311%" y="111.50"></text></g><g><title>alloc_anon_folio (14 samples, 6.31%)</title><rect x="26.1261%" y="213" width="6.3063%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="14"/><text x="26.3761%" y="223.50">alloc_an..</text></g><g><title>vma_alloc_folio (14 samples, 6.31%)</title><rect x="26.1261%" y="197" width="6.3063%" height="15" fill="rgb(249,33,26)" fg:x="58" fg:w="14"/><text x="26.3761%" y="207.50">vma_allo..</text></g><g><title>alloc_pages_mpol (14 samples, 6.31%)</title><rect x="26.1261%" y="181" width="6.3063%" height="15" fill="rgb(235,183,28)" fg:x="58" fg:w="14"/><text x="26.3761%" y="191.50">alloc_pa..</text></g><g><title>__alloc_pages (14 samples, 6.31%)</title><rect x="26.1261%" y="165" width="6.3063%" height="15" fill="rgb(221,5,38)" fg:x="58" fg:w="14"/><text x="26.3761%" y="175.50">__alloc_..</text></g><g><title>post_alloc_hook (1 samples, 0.45%)</title><rect x="31.9820%" y="149" width="0.4505%" height="15" fill="rgb(247,18,42)" fg:x="71" fg:w="1"/><text x="32.2320%" y="159.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.90%)</title><rect x="33.7838%" y="133" width="0.9009%" height="15" fill="rgb(241,131,45)" fg:x="75" fg:w="2"/><text x="34.0338%" y="143.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.45%)</title><rect x="34.2342%" y="117" width="0.4505%" height="15" fill="rgb(249,31,29)" fg:x="76" fg:w="1"/><text x="34.4842%" y="127.50"></text></g><g><title>folio_add_lru_vma (6 samples, 2.70%)</title><rect x="32.4324%" y="213" width="2.7027%" height="15" fill="rgb(225,111,53)" fg:x="72" fg:w="6"/><text x="32.6824%" y="223.50">fo..</text></g><g><title>folio_add_lru (6 samples, 2.70%)</title><rect x="32.4324%" y="197" width="2.7027%" height="15" fill="rgb(238,160,17)" fg:x="72" fg:w="6"/><text x="32.6824%" y="207.50">fo..</text></g><g><title>folio_batch_move_lru (6 samples, 2.70%)</title><rect x="32.4324%" y="181" width="2.7027%" height="15" fill="rgb(214,148,48)" fg:x="72" fg:w="6"/><text x="32.6824%" y="191.50">fo..</text></g><g><title>lru_add_fn (5 samples, 2.25%)</title><rect x="32.8829%" y="165" width="2.2523%" height="15" fill="rgb(232,36,49)" fg:x="73" fg:w="5"/><text x="33.1329%" y="175.50">l..</text></g><g><title>lru_gen_add_folio (5 samples, 2.25%)</title><rect x="32.8829%" y="149" width="2.2523%" height="15" fill="rgb(209,103,24)" fg:x="73" fg:w="5"/><text x="33.1329%" y="159.50">l..</text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.45%)</title><rect x="34.6847%" y="133" width="0.4505%" height="15" fill="rgb(229,88,8)" fg:x="77" fg:w="1"/><text x="34.9347%" y="143.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.45%)</title><rect x="35.5856%" y="165" width="0.4505%" height="15" fill="rgb(213,181,19)" fg:x="79" fg:w="1"/><text x="35.8356%" y="175.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.45%)</title><rect x="35.5856%" y="149" width="0.4505%" height="15" fill="rgb(254,191,54)" fg:x="79" fg:w="1"/><text x="35.8356%" y="159.50"></text></g><g><title>do_anonymous_page (35 samples, 15.77%)</title><rect x="20.7207%" y="229" width="15.7658%" height="15" fill="rgb(241,83,37)" fg:x="46" fg:w="35"/><text x="20.9707%" y="239.50">do_anonymous_page</text></g><g><title>folio_add_new_anon_rmap (3 samples, 1.35%)</title><rect x="35.1351%" y="213" width="1.3514%" height="15" fill="rgb(233,36,39)" fg:x="78" fg:w="3"/><text x="35.3851%" y="223.50"></text></g><g><title>__lruvec_stat_mod_folio (3 samples, 1.35%)</title><rect x="35.1351%" y="197" width="1.3514%" height="15" fill="rgb(226,3,54)" fg:x="78" fg:w="3"/><text x="35.3851%" y="207.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.90%)</title><rect x="35.5856%" y="181" width="0.9009%" height="15" fill="rgb(245,192,40)" fg:x="79" fg:w="2"/><text x="35.8356%" y="191.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.45%)</title><rect x="36.0360%" y="165" width="0.4505%" height="15" fill="rgb(238,167,29)" fg:x="80" fg:w="1"/><text x="36.2860%" y="175.50"></text></g><g><title>mksaveddirty_shift (2 samples, 0.90%)</title><rect x="36.4865%" y="229" width="0.9009%" height="15" fill="rgb(232,182,51)" fg:x="81" fg:w="2"/><text x="36.7365%" y="239.50"></text></g><g><title>__handle_mm_fault (41 samples, 18.47%)</title><rect x="19.3694%" y="261" width="18.4685%" height="15" fill="rgb(231,60,39)" fg:x="43" fg:w="41"/><text x="19.6194%" y="271.50">__handle_mm_fault</text></g><g><title>handle_pte_fault (41 samples, 18.47%)</title><rect x="19.3694%" y="245" width="18.4685%" height="15" fill="rgb(208,69,12)" fg:x="43" fg:w="41"/><text x="19.6194%" y="255.50">handle_pte_fault</text></g><g><title>srso_safe_ret (1 samples, 0.45%)</title><rect x="37.3874%" y="229" width="0.4505%" height="15" fill="rgb(235,93,37)" fg:x="83" fg:w="1"/><text x="37.6374%" y="239.50"></text></g><g><title>count_memcg_events.constprop.0 (3 samples, 1.35%)</title><rect x="37.8378%" y="261" width="1.3514%" height="15" fill="rgb(213,116,39)" fg:x="84" fg:w="3"/><text x="38.0878%" y="271.50"></text></g><g><title>__count_memcg_events (3 samples, 1.35%)</title><rect x="37.8378%" y="245" width="1.3514%" height="15" fill="rgb(222,207,29)" fg:x="84" fg:w="3"/><text x="38.0878%" y="255.50"></text></g><g><title>handle_mm_fault (46 samples, 20.72%)</title><rect x="18.9189%" y="277" width="20.7207%" height="15" fill="rgb(206,96,30)" fg:x="42" fg:w="46"/><text x="19.1689%" y="287.50">handle_mm_fault</text></g><g><title>mem_cgroup_from_task (1 samples, 0.45%)</title><rect x="39.1892%" y="261" width="0.4505%" height="15" fill="rgb(218,138,4)" fg:x="87" fg:w="1"/><text x="39.4392%" y="271.50"></text></g><g><title>do_user_addr_fault (48 samples, 21.62%)</title><rect x="18.4685%" y="293" width="21.6216%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="48"/><text x="18.7185%" y="303.50">do_user_addr_fault</text></g><g><title>lock_vma_under_rcu (1 samples, 0.45%)</title><rect x="39.6396%" y="277" width="0.4505%" height="15" fill="rgb(239,60,40)" fg:x="88" fg:w="1"/><text x="39.8896%" y="287.50"></text></g><g><title>asm_exc_page_fault (56 samples, 25.23%)</title><rect x="15.3153%" y="325" width="25.2252%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="56"/><text x="15.5653%" y="335.50">asm_exc_page_fault</text></g><g><title>exc_page_fault (54 samples, 24.32%)</title><rect x="16.2162%" y="309" width="24.3243%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="54"/><text x="16.4662%" y="319.50">exc_page_fault</text></g><g><title>irqentry_enter (1 samples, 0.45%)</title><rect x="40.0901%" y="293" width="0.4505%" height="15" fill="rgb(250,213,24)" fg:x="89" fg:w="1"/><text x="40.3401%" y="303.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h808f6b6e83860099E.llvm.9433926591907725808 (78 samples, 35.14%)</title><rect x="6.7568%" y="341" width="35.1351%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="78"/><text x="7.0068%" y="351.50">_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash1..</text></g><g><title>sync_regs (3 samples, 1.35%)</title><rect x="40.5405%" y="325" width="1.3514%" height="15" fill="rgb(231,138,38)" fg:x="90" fg:w="3"/><text x="40.7905%" y="335.50"></text></g><g><title>__brk (1 samples, 0.45%)</title><rect x="41.8919%" y="341" width="0.4505%" height="15" fill="rgb(231,145,46)" fg:x="93" fg:w="1"/><text x="42.1419%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.45%)</title><rect x="41.8919%" y="325" width="0.4505%" height="15" fill="rgb(251,118,11)" fg:x="93" fg:w="1"/><text x="42.1419%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.45%)</title><rect x="41.8919%" y="309" width="0.4505%" height="15" fill="rgb(217,147,25)" fg:x="93" fg:w="1"/><text x="42.1419%" y="319.50"></text></g><g><title>x64_sys_call (1 samples, 0.45%)</title><rect x="41.8919%" y="293" width="0.4505%" height="15" fill="rgb(247,81,37)" fg:x="93" fg:w="1"/><text x="42.1419%" y="303.50"></text></g><g><title>__x64_sys_brk (1 samples, 0.45%)</title><rect x="41.8919%" y="277" width="0.4505%" height="15" fill="rgb(209,12,38)" fg:x="93" fg:w="1"/><text x="42.1419%" y="287.50"></text></g><g><title>__do_sys_brk (1 samples, 0.45%)</title><rect x="41.8919%" y="261" width="0.4505%" height="15" fill="rgb(227,1,9)" fg:x="93" fg:w="1"/><text x="42.1419%" y="271.50"></text></g><g><title>check_brk_limits (1 samples, 0.45%)</title><rect x="41.8919%" y="245" width="0.4505%" height="15" fill="rgb(248,47,43)" fg:x="93" fg:w="1"/><text x="42.1419%" y="255.50"></text></g><g><title>get_unmapped_area (1 samples, 0.45%)</title><rect x="41.8919%" y="229" width="0.4505%" height="15" fill="rgb(221,10,30)" fg:x="93" fg:w="1"/><text x="42.1419%" y="239.50"></text></g><g><title>[unknown] (114 samples, 51.35%)</title><rect x="0.9009%" y="357" width="51.3514%" height="15" fill="rgb(210,229,1)" fg:x="2" fg:w="114"/><text x="1.1509%" y="367.50">[unknown]</text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 9.91%)</title><rect x="42.3423%" y="341" width="9.9099%" height="15" fill="rgb(222,148,37)" fg:x="94" fg:w="22"/><text x="42.5923%" y="351.50">core::hash::Bu..</text></g><g><title>_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h54869074615e5fbbE.llvm.11818118077158964558 (2 samples, 0.90%)</title><rect x="52.2523%" y="357" width="0.9009%" height="15" fill="rgb(234,67,33)" fg:x="116" fg:w="2"/><text x="52.5023%" y="367.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="341" width="0.4505%" height="15" fill="rgb(247,98,35)" fg:x="118" fg:w="1"/><text x="53.4032%" y="351.50"></text></g><g><title>exc_page_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="325" width="0.4505%" height="15" fill="rgb(247,138,52)" fg:x="118" fg:w="1"/><text x="53.4032%" y="335.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="309" width="0.4505%" height="15" fill="rgb(213,79,30)" fg:x="118" fg:w="1"/><text x="53.4032%" y="319.50"></text></g><g><title>handle_mm_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="293" width="0.4505%" height="15" fill="rgb(246,177,23)" fg:x="118" fg:w="1"/><text x="53.4032%" y="303.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="277" width="0.4505%" height="15" fill="rgb(230,62,27)" fg:x="118" fg:w="1"/><text x="53.4032%" y="287.50"></text></g><g><title>handle_pte_fault (1 samples, 0.45%)</title><rect x="53.1532%" y="261" width="0.4505%" height="15" fill="rgb(216,154,8)" fg:x="118" fg:w="1"/><text x="53.4032%" y="271.50"></text></g><g><title>do_anonymous_page (1 samples, 0.45%)</title><rect x="53.1532%" y="245" width="0.4505%" height="15" fill="rgb(244,35,45)" fg:x="118" fg:w="1"/><text x="53.4032%" y="255.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.45%)</title><rect x="53.1532%" y="229" width="0.4505%" height="15" fill="rgb(251,115,12)" fg:x="118" fg:w="1"/><text x="53.4032%" y="239.50"></text></g><g><title>folio_add_lru (1 samples, 0.45%)</title><rect x="53.1532%" y="213" width="0.4505%" height="15" fill="rgb(240,54,50)" fg:x="118" fg:w="1"/><text x="53.4032%" y="223.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.45%)</title><rect x="53.1532%" y="197" width="0.4505%" height="15" fill="rgb(233,84,52)" fg:x="118" fg:w="1"/><text x="53.4032%" y="207.50"></text></g><g><title>lru_add_fn (1 samples, 0.45%)</title><rect x="53.1532%" y="181" width="0.4505%" height="15" fill="rgb(207,117,47)" fg:x="118" fg:w="1"/><text x="53.4032%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.90%)</title><rect x="53.1532%" y="357" width="0.9009%" height="15" fill="rgb(249,43,39)" fg:x="118" fg:w="2"/><text x="53.4032%" y="367.50"></text></g><g><title>sync_regs (1 samples, 0.45%)</title><rect x="53.6036%" y="341" width="0.4505%" height="15" fill="rgb(209,38,44)" fg:x="119" fg:w="1"/><text x="53.8536%" y="351.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.45%)</title><rect x="54.0541%" y="149" width="0.4505%" height="15" fill="rgb(236,212,23)" fg:x="120" fg:w="1"/><text x="54.3041%" y="159.50"></text></g><g><title>uncharge_folio (1 samples, 0.45%)</title><rect x="54.0541%" y="133" width="0.4505%" height="15" fill="rgb(242,79,21)" fg:x="120" fg:w="1"/><text x="54.3041%" y="143.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.45%)</title><rect x="55.8559%" y="133" width="0.4505%" height="15" fill="rgb(211,96,35)" fg:x="124" fg:w="1"/><text x="56.1059%" y="143.50"></text></g><g><title>free_unref_page_list (5 samples, 2.25%)</title><rect x="54.5045%" y="149" width="2.2523%" height="15" fill="rgb(253,215,40)" fg:x="121" fg:w="5"/><text x="54.7545%" y="159.50">f..</text></g><g><title>get_pfnblock_flags_mask (1 samples, 0.45%)</title><rect x="56.3063%" y="133" width="0.4505%" height="15" fill="rgb(211,81,21)" fg:x="125" fg:w="1"/><text x="56.5563%" y="143.50"></text></g><g><title>tlb_finish_mmu (10 samples, 4.50%)</title><rect x="54.0541%" y="213" width="4.5045%" height="15" fill="rgb(208,190,38)" fg:x="120" fg:w="10"/><text x="54.3041%" y="223.50">tlb_f..</text></g><g><title>tlb_batch_pages_flush (10 samples, 4.50%)</title><rect x="54.0541%" y="197" width="4.5045%" height="15" fill="rgb(235,213,38)" fg:x="120" fg:w="10"/><text x="54.3041%" y="207.50">tlb_b..</text></g><g><title>free_pages_and_swap_cache (10 samples, 4.50%)</title><rect x="54.0541%" y="181" width="4.5045%" height="15" fill="rgb(237,122,38)" fg:x="120" fg:w="10"/><text x="54.3041%" y="191.50">free_..</text></g><g><title>release_pages (10 samples, 4.50%)</title><rect x="54.0541%" y="165" width="4.5045%" height="15" fill="rgb(244,218,35)" fg:x="120" fg:w="10"/><text x="54.3041%" y="175.50">relea..</text></g><g><title>lru_gen_del_folio.constprop.0 (4 samples, 1.80%)</title><rect x="56.7568%" y="149" width="1.8018%" height="15" fill="rgb(240,68,47)" fg:x="126" fg:w="4"/><text x="57.0068%" y="159.50">l..</text></g><g><title>__mod_lruvec_state (1 samples, 0.45%)</title><rect x="58.1081%" y="133" width="0.4505%" height="15" fill="rgb(210,16,53)" fg:x="129" fg:w="1"/><text x="58.3581%" y="143.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.45%)</title><rect x="58.1081%" y="117" width="0.4505%" height="15" fill="rgb(235,124,12)" fg:x="129" fg:w="1"/><text x="58.3581%" y="127.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.45%)</title><rect x="59.0090%" y="133" width="0.4505%" height="15" fill="rgb(224,169,11)" fg:x="131" fg:w="1"/><text x="59.2590%" y="143.50"></text></g><g><title>__get_free_pages (1 samples, 0.45%)</title><rect x="59.0090%" y="117" width="0.4505%" height="15" fill="rgb(250,166,2)" fg:x="131" fg:w="1"/><text x="59.2590%" y="127.50"></text></g><g><title>alloc_pages (1 samples, 0.45%)</title><rect x="59.0090%" y="101" width="0.4505%" height="15" fill="rgb(242,216,29)" fg:x="131" fg:w="1"/><text x="59.2590%" y="111.50"></text></g><g><title>alloc_pages_mpol (1 samples, 0.45%)</title><rect x="59.0090%" y="85" width="0.4505%" height="15" fill="rgb(230,116,27)" fg:x="131" fg:w="1"/><text x="59.2590%" y="95.50"></text></g><g><title>__alloc_pages (1 samples, 0.45%)</title><rect x="59.0090%" y="69" width="0.4505%" height="15" fill="rgb(228,99,48)" fg:x="131" fg:w="1"/><text x="59.2590%" y="79.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.45%)</title><rect x="59.0090%" y="53" width="0.4505%" height="15" fill="rgb(253,11,6)" fg:x="131" fg:w="1"/><text x="59.2590%" y="63.50"></text></g><g><title>clear_page_rep (1 samples, 0.45%)</title><rect x="59.0090%" y="37" width="0.4505%" height="15" fill="rgb(247,143,39)" fg:x="131" fg:w="1"/><text x="59.2590%" y="47.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.90%)</title><rect x="61.2613%" y="101" width="0.9009%" height="15" fill="rgb(236,97,10)" fg:x="136" fg:w="2"/><text x="61.5113%" y="111.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.90%)</title><rect x="61.2613%" y="85" width="0.9009%" height="15" fill="rgb(233,208,19)" fg:x="136" fg:w="2"/><text x="61.5113%" y="95.50"></text></g><g><title>__munmap (19 samples, 8.56%)</title><rect x="54.0541%" y="357" width="8.5586%" height="15" fill="rgb(216,164,2)" fg:x="120" fg:w="19"/><text x="54.3041%" y="367.50">__munmap</text></g><g><title>entry_SYSCALL_64_after_hwframe (19 samples, 8.56%)</title><rect x="54.0541%" y="341" width="8.5586%" height="15" fill="rgb(220,129,5)" fg:x="120" fg:w="19"/><text x="54.3041%" y="351.50">entry_SYSCAL..</text></g><g><title>do_syscall_64 (19 samples, 8.56%)</title><rect x="54.0541%" y="325" width="8.5586%" height="15" fill="rgb(242,17,10)" fg:x="120" fg:w="19"/><text x="54.3041%" y="335.50">do_syscall_64</text></g><g><title>x64_sys_call (19 samples, 8.56%)</title><rect x="54.0541%" y="309" width="8.5586%" height="15" fill="rgb(242,107,0)" fg:x="120" fg:w="19"/><text x="54.3041%" y="319.50">x64_sys_call</text></g><g><title>__x64_sys_munmap (19 samples, 8.56%)</title><rect x="54.0541%" y="293" width="8.5586%" height="15" fill="rgb(251,28,31)" fg:x="120" fg:w="19"/><text x="54.3041%" y="303.50">__x64_sys_mu..</text></g><g><title>__vm_munmap (19 samples, 8.56%)</title><rect x="54.0541%" y="277" width="8.5586%" height="15" fill="rgb(233,223,10)" fg:x="120" fg:w="19"/><text x="54.3041%" y="287.50">__vm_munmap</text></g><g><title>do_vmi_munmap (19 samples, 8.56%)</title><rect x="54.0541%" y="261" width="8.5586%" height="15" fill="rgb(215,21,27)" fg:x="120" fg:w="19"/><text x="54.3041%" y="271.50">do_vmi_munmap</text></g><g><title>do_vmi_align_munmap (19 samples, 8.56%)</title><rect x="54.0541%" y="245" width="8.5586%" height="15" fill="rgb(232,23,21)" fg:x="120" fg:w="19"/><text x="54.3041%" y="255.50">do_vmi_align..</text></g><g><title>unmap_region (19 samples, 8.56%)</title><rect x="54.0541%" y="229" width="8.5586%" height="15" fill="rgb(244,5,23)" fg:x="120" fg:w="19"/><text x="54.3041%" y="239.50">unmap_region</text></g><g><title>unmap_vmas (9 samples, 4.05%)</title><rect x="58.5586%" y="213" width="4.0541%" height="15" fill="rgb(226,81,46)" fg:x="130" fg:w="9"/><text x="58.8086%" y="223.50">unma..</text></g><g><title>unmap_single_vma (9 samples, 4.05%)</title><rect x="58.5586%" y="197" width="4.0541%" height="15" fill="rgb(247,70,30)" fg:x="130" fg:w="9"/><text x="58.8086%" y="207.50">unma..</text></g><g><title>unmap_page_range (9 samples, 4.05%)</title><rect x="58.5586%" y="181" width="4.0541%" height="15" fill="rgb(212,68,19)" fg:x="130" fg:w="9"/><text x="58.8086%" y="191.50">unma..</text></g><g><title>zap_pmd_range.isra.0 (9 samples, 4.05%)</title><rect x="58.5586%" y="165" width="4.0541%" height="15" fill="rgb(240,187,13)" fg:x="130" fg:w="9"/><text x="58.8086%" y="175.50">zap_..</text></g><g><title>zap_pte_range (9 samples, 4.05%)</title><rect x="58.5586%" y="149" width="4.0541%" height="15" fill="rgb(223,113,26)" fg:x="130" fg:w="9"/><text x="58.8086%" y="159.50">zap_..</text></g><g><title>folio_remove_rmap_ptes (7 samples, 3.15%)</title><rect x="59.4595%" y="133" width="3.1532%" height="15" fill="rgb(206,192,2)" fg:x="132" fg:w="7"/><text x="59.7095%" y="143.50">fol..</text></g><g><title>__lruvec_stat_mod_folio (5 samples, 2.25%)</title><rect x="60.3604%" y="117" width="2.2523%" height="15" fill="rgb(241,108,4)" fg:x="134" fg:w="5"/><text x="60.6104%" y="127.50">_..</text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.45%)</title><rect x="62.1622%" y="101" width="0.4505%" height="15" fill="rgb(247,173,49)" fg:x="138" fg:w="1"/><text x="62.4122%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.45%)</title><rect x="62.6126%" y="357" width="0.4505%" height="15" fill="rgb(224,114,35)" fg:x="139" fg:w="1"/><text x="62.8626%" y="367.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.45%)</title><rect x="63.9640%" y="293" width="0.4505%" height="15" fill="rgb(245,159,27)" fg:x="142" fg:w="1"/><text x="64.2140%" y="303.50"></text></g><g><title>alloc_anon_folio (1 samples, 0.45%)</title><rect x="64.4144%" y="229" width="0.4505%" height="15" fill="rgb(245,172,44)" fg:x="143" fg:w="1"/><text x="64.6644%" y="239.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.45%)</title><rect x="64.4144%" y="213" width="0.4505%" height="15" fill="rgb(236,23,11)" fg:x="143" fg:w="1"/><text x="64.6644%" y="223.50"></text></g><g><title>alloc_pages_mpol (1 samples, 0.45%)</title><rect x="64.4144%" y="197" width="0.4505%" height="15" fill="rgb(205,117,38)" fg:x="143" fg:w="1"/><text x="64.6644%" y="207.50"></text></g><g><title>__alloc_pages (1 samples, 0.45%)</title><rect x="64.4144%" y="181" width="0.4505%" height="15" fill="rgb(237,72,25)" fg:x="143" fg:w="1"/><text x="64.6644%" y="191.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.45%)</title><rect x="64.4144%" y="165" width="0.4505%" height="15" fill="rgb(244,70,9)" fg:x="143" fg:w="1"/><text x="64.6644%" y="175.50"></text></g><g><title>rmqueue (1 samples, 0.45%)</title><rect x="64.4144%" y="149" width="0.4505%" height="15" fill="rgb(217,125,39)" fg:x="143" fg:w="1"/><text x="64.6644%" y="159.50"></text></g><g><title>_int_malloc (5 samples, 2.25%)</title><rect x="63.0631%" y="357" width="2.2523%" height="15" fill="rgb(235,36,10)" fg:x="140" fg:w="5"/><text x="63.3131%" y="367.50">_..</text></g><g><title>asm_exc_page_fault (4 samples, 1.80%)</title><rect x="63.5135%" y="341" width="1.8018%" height="15" fill="rgb(251,123,47)" fg:x="141" fg:w="4"/><text x="63.7635%" y="351.50">a..</text></g><g><title>exc_page_fault (4 samples, 1.80%)</title><rect x="63.5135%" y="325" width="1.8018%" height="15" fill="rgb(221,13,13)" fg:x="141" fg:w="4"/><text x="63.7635%" y="335.50">e..</text></g><g><title>do_user_addr_fault (3 samples, 1.35%)</title><rect x="63.9640%" y="309" width="1.3514%" height="15" fill="rgb(238,131,9)" fg:x="142" fg:w="3"/><text x="64.2140%" y="319.50"></text></g><g><title>handle_mm_fault (2 samples, 0.90%)</title><rect x="64.4144%" y="293" width="0.9009%" height="15" fill="rgb(211,50,8)" fg:x="143" fg:w="2"/><text x="64.6644%" y="303.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.90%)</title><rect x="64.4144%" y="277" width="0.9009%" height="15" fill="rgb(245,182,24)" fg:x="143" fg:w="2"/><text x="64.6644%" y="287.50"></text></g><g><title>handle_pte_fault (2 samples, 0.90%)</title><rect x="64.4144%" y="261" width="0.9009%" height="15" fill="rgb(242,14,37)" fg:x="143" fg:w="2"/><text x="64.6644%" y="271.50"></text></g><g><title>do_anonymous_page (2 samples, 0.90%)</title><rect x="64.4144%" y="245" width="0.9009%" height="15" fill="rgb(246,228,12)" fg:x="143" fg:w="2"/><text x="64.6644%" y="255.50"></text></g><g><title>folio_add_lru_vma (1 samples, 0.45%)</title><rect x="64.8649%" y="229" width="0.4505%" height="15" fill="rgb(213,55,15)" fg:x="144" fg:w="1"/><text x="65.1149%" y="239.50"></text></g><g><title>folio_add_lru (1 samples, 0.45%)</title><rect x="64.8649%" y="213" width="0.4505%" height="15" fill="rgb(209,9,3)" fg:x="144" fg:w="1"/><text x="65.1149%" y="223.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.45%)</title><rect x="64.8649%" y="197" width="0.4505%" height="15" fill="rgb(230,59,30)" fg:x="144" fg:w="1"/><text x="65.1149%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 2.25%)</title><rect x="65.3153%" y="357" width="2.2523%" height="15" fill="rgb(209,121,21)" fg:x="145" fg:w="5"/><text x="65.5653%" y="367.50">c..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 4.95%)</title><rect x="67.5676%" y="357" width="4.9550%" height="15" fill="rgb(220,109,13)" fg:x="150" fg:w="11"/><text x="67.8176%" y="367.50">hashbr..</text></g><g><title>malloc (4 samples, 1.80%)</title><rect x="72.5225%" y="357" width="1.8018%" height="15" fill="rgb(232,18,1)" fg:x="161" fg:w="4"/><text x="72.7725%" y="367.50">m..</text></g><g><title>__rseq_handle_notify_resume (3 samples, 1.35%)</title><rect x="89.1892%" y="277" width="1.3514%" height="15" fill="rgb(215,41,42)" fg:x="198" fg:w="3"/><text x="89.4392%" y="287.50"></text></g><g><title>rseq_ip_fixup (3 samples, 1.35%)</title><rect x="89.1892%" y="261" width="1.3514%" height="15" fill="rgb(224,123,36)" fg:x="198" fg:w="3"/><text x="89.4392%" y="271.50"></text></g><g><title>__get_user_8 (3 samples, 1.35%)</title><rect x="89.1892%" y="245" width="1.3514%" height="15" fill="rgb(240,125,3)" fg:x="198" fg:w="3"/><text x="89.4392%" y="255.50"></text></g><g><title>asm_sysvec_call_function_single (2 samples, 0.90%)</title><rect x="89.6396%" y="229" width="0.9009%" height="15" fill="rgb(205,98,50)" fg:x="199" fg:w="2"/><text x="89.8896%" y="239.50"></text></g><g><title>sysvec_call_function_single (2 samples, 0.90%)</title><rect x="89.6396%" y="213" width="0.9009%" height="15" fill="rgb(205,185,37)" fg:x="199" fg:w="2"/><text x="89.8896%" y="223.50"></text></g><g><title>__sysvec_call_function_single (2 samples, 0.90%)</title><rect x="89.6396%" y="197" width="0.9009%" height="15" fill="rgb(238,207,15)" fg:x="199" fg:w="2"/><text x="89.8896%" y="207.50"></text></g><g><title>generic_smp_call_function_single_interrupt (2 samples, 0.90%)</title><rect x="89.6396%" y="181" width="0.9009%" height="15" fill="rgb(213,199,42)" fg:x="199" fg:w="2"/><text x="89.8896%" y="191.50"></text></g><g><title>__flush_smp_call_function_queue (2 samples, 0.90%)</title><rect x="89.6396%" y="165" width="0.9009%" height="15" fill="rgb(235,201,11)" fg:x="199" fg:w="2"/><text x="89.8896%" y="175.50"></text></g><g><title>remote_function (1 samples, 0.45%)</title><rect x="90.0901%" y="149" width="0.4505%" height="15" fill="rgb(207,46,11)" fg:x="200" fg:w="1"/><text x="90.3401%" y="159.50"></text></g><g><title>event_function (1 samples, 0.45%)</title><rect x="90.0901%" y="133" width="0.4505%" height="15" fill="rgb(241,35,35)" fg:x="200" fg:w="1"/><text x="90.3401%" y="143.50"></text></g><g><title>__perf_event_enable (1 samples, 0.45%)</title><rect x="90.0901%" y="117" width="0.4505%" height="15" fill="rgb(243,32,47)" fg:x="200" fg:w="1"/><text x="90.3401%" y="127.50"></text></g><g><title>ctx_sched_in (1 samples, 0.45%)</title><rect x="90.0901%" y="101" width="0.4505%" height="15" fill="rgb(247,202,23)" fg:x="200" fg:w="1"/><text x="90.3401%" y="111.50"></text></g><g><title>local_clock (1 samples, 0.45%)</title><rect x="90.0901%" y="85" width="0.4505%" height="15" fill="rgb(219,102,11)" fg:x="200" fg:w="1"/><text x="90.3401%" y="95.50"></text></g><g><title>local_clock_noinstr (1 samples, 0.45%)</title><rect x="90.0901%" y="69" width="0.4505%" height="15" fill="rgb(243,110,44)" fg:x="200" fg:w="1"/><text x="90.3401%" y="79.50"></text></g><g><title>sched_clock_noinstr (1 samples, 0.45%)</title><rect x="90.0901%" y="53" width="0.4505%" height="15" fill="rgb(222,74,54)" fg:x="200" fg:w="1"/><text x="90.3401%" y="63.50"></text></g><g><title>native_sched_clock (1 samples, 0.45%)</title><rect x="90.0901%" y="37" width="0.4505%" height="15" fill="rgb(216,99,12)" fg:x="200" fg:w="1"/><text x="90.3401%" y="47.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.45%)</title><rect x="90.5405%" y="229" width="0.4505%" height="15" fill="rgb(226,22,26)" fg:x="201" fg:w="1"/><text x="90.7905%" y="239.50"></text></g><g><title>srso_safe_ret (1 samples, 0.45%)</title><rect x="90.5405%" y="213" width="0.4505%" height="15" fill="rgb(217,163,10)" fg:x="201" fg:w="1"/><text x="90.7905%" y="223.50"></text></g><g><title>solana_accounts_db::accounts_index::in_mem_accounts_index::InMemAccountsIndex&lt;T,U&gt;::insert_new_entry_if_missing_with_lock (38 samples, 17.12%)</title><rect x="74.3243%" y="357" width="17.1171%" height="15" fill="rgb(213,25,53)" fg:x="165" fg:w="38"/><text x="74.5743%" y="367.50">solana_accounts_db::account..</text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 2.25%)</title><rect x="89.1892%" y="341" width="2.2523%" height="15" fill="rgb(252,105,26)" fg:x="198" fg:w="5"/><text x="89.4392%" y="351.50">a..</text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 2.25%)</title><rect x="89.1892%" y="325" width="2.2523%" height="15" fill="rgb(220,39,43)" fg:x="198" fg:w="5"/><text x="89.4392%" y="335.50">s..</text></g><g><title>irqentry_exit (5 samples, 2.25%)</title><rect x="89.1892%" y="309" width="2.2523%" height="15" fill="rgb(229,68,48)" fg:x="198" fg:w="5"/><text x="89.4392%" y="319.50">i..</text></g><g><title>irqentry_exit_to_user_mode (5 samples, 2.25%)</title><rect x="89.1892%" y="293" width="2.2523%" height="15" fill="rgb(252,8,32)" fg:x="198" fg:w="5"/><text x="89.4392%" y="303.50">i..</text></g><g><title>schedule (2 samples, 0.90%)</title><rect x="90.5405%" y="277" width="0.9009%" height="15" fill="rgb(223,20,43)" fg:x="201" fg:w="2"/><text x="90.7905%" y="287.50"></text></g><g><title>__schedule (2 samples, 0.90%)</title><rect x="90.5405%" y="261" width="0.9009%" height="15" fill="rgb(229,81,49)" fg:x="201" fg:w="2"/><text x="90.7905%" y="271.50"></text></g><g><title>finish_task_switch.isra.0 (2 samples, 0.90%)</title><rect x="90.5405%" y="245" width="0.9009%" height="15" fill="rgb(236,28,36)" fg:x="201" fg:w="2"/><text x="90.7905%" y="255.50"></text></g><g><title>srso_safe_ret (1 samples, 0.45%)</title><rect x="90.9910%" y="229" width="0.4505%" height="15" fill="rgb(249,185,26)" fg:x="202" fg:w="1"/><text x="91.2410%" y="239.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (5 samples, 2.25%)</title><rect x="91.4414%" y="341" width="2.2523%" height="15" fill="rgb(249,174,33)" fg:x="203" fg:w="5"/><text x="91.6914%" y="351.50">c..</text></g><g><title>[[vdso]] (5 samples, 2.25%)</title><rect x="91.4414%" y="325" width="2.2523%" height="15" fill="rgb(233,201,37)" fg:x="203" fg:w="5"/><text x="91.6914%" y="335.50">[..</text></g><g><title>solana_measure::measure::Measure::start (7 samples, 3.15%)</title><rect x="91.4414%" y="357" width="3.1532%" height="15" fill="rgb(221,78,26)" fg:x="203" fg:w="7"/><text x="91.6914%" y="367.50">sol..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.90%)</title><rect x="93.6937%" y="341" width="0.9009%" height="15" fill="rgb(250,127,30)" fg:x="208" fg:w="2"/><text x="93.9437%" y="351.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (10 samples, 4.50%)</title><rect x="94.5946%" y="325" width="4.5045%" height="15" fill="rgb(230,49,44)" fg:x="210" fg:w="10"/><text x="94.8446%" y="335.50">clock..</text></g><g><title>[[vdso]] (9 samples, 4.05%)</title><rect x="95.0450%" y="309" width="4.0541%" height="15" fill="rgb(229,67,23)" fg:x="211" fg:w="9"/><text x="95.2950%" y="319.50">[[vd..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.45%)</title><rect x="99.0991%" y="325" width="0.4505%" height="15" fill="rgb(249,83,47)" fg:x="220" fg:w="1"/><text x="99.3491%" y="335.50"></text></g><g><title>all (222 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="222"/><text x="0.2500%" y="399.50"></text></g><g><title>accountsdb-micr (222 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="222"/><text x="0.2500%" y="383.50">accountsdb-micr</text></g><g><title>solana_measure::measure::Measure::stop (12 samples, 5.41%)</title><rect x="94.5946%" y="357" width="5.4054%" height="15" fill="rgb(219,56,2)" fg:x="210" fg:w="12"/><text x="94.8446%" y="367.50">solana_..</text></g><g><title>std::time::Instant::elapsed (12 samples, 5.41%)</title><rect x="94.5946%" y="341" width="5.4054%" height="15" fill="rgb(233,0,4)" fg:x="210" fg:w="12"/><text x="94.8446%" y="351.50">std::ti..</text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.45%)</title><rect x="99.5495%" y="325" width="0.4505%" height="15" fill="rgb(235,30,7)" fg:x="221" fg:w="1"/><text x="99.7995%" y="335.50"></text></g></svg></svg>